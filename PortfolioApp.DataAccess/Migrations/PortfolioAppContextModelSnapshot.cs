// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortfolioApp.DataAccess;

#nullable disable

namespace PortfolioApp.DataAccess.Migrations
{
    [DbContext(typeof(PortfolioAppContext))]
    partial class PortfolioAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("PortfolioApp.Domain.AggregatedResult", b =>
                {
                    b.Property<int>("AggregatedResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PortfolioName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RunMetadataId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalCollateral")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalExpectedLoss")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalOutstanding")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalScenarioCollateral")
                        .HasColumnType("TEXT");

                    b.HasKey("AggregatedResultId");

                    b.HasIndex("RunMetadataId");

                    b.ToTable("SimulationResults");
                });

            modelBuilder.Entity("PortfolioApp.Domain.CountryAdjustment", b =>
                {
                    b.Property<int>("CountryAdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PercentageChange")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RunMetadataId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CountryAdjustmentId");

                    b.HasIndex("RunMetadataId");

                    b.ToTable("Adjustments");
                });

            modelBuilder.Entity("PortfolioApp.Domain.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CollateralValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditRating")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OriginalLoanAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OutstandingAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoanId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("PortfolioApp.Domain.Portfolio", b =>
                {
                    b.Property<int>("PortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PortfolioId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("PortfolioApp.Domain.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreditRating")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProbabilityOfDefault")
                        .HasColumnType("TEXT");

                    b.HasKey("RatingId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("PortfolioApp.Domain.RunMetadata", b =>
                {
                    b.Property<int>("RunMetadataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("ExecutionTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("RunMetadataId");

                    b.ToTable("Runs");
                });

            modelBuilder.Entity("PortfolioApp.Domain.AggregatedResult", b =>
                {
                    b.HasOne("PortfolioApp.Domain.RunMetadata", "RunMetadata")
                        .WithMany("SimulationResults")
                        .HasForeignKey("RunMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RunMetadata");
                });

            modelBuilder.Entity("PortfolioApp.Domain.CountryAdjustment", b =>
                {
                    b.HasOne("PortfolioApp.Domain.RunMetadata", null)
                        .WithMany("Adjustments")
                        .HasForeignKey("RunMetadataId");
                });

            modelBuilder.Entity("PortfolioApp.Domain.Loan", b =>
                {
                    b.HasOne("PortfolioApp.Domain.Portfolio", "Portfolio")
                        .WithMany("Loans")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("PortfolioApp.Domain.Portfolio", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("PortfolioApp.Domain.RunMetadata", b =>
                {
                    b.Navigation("Adjustments");

                    b.Navigation("SimulationResults");
                });
#pragma warning restore 612, 618
        }
    }
}
